<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
	<title>phputf8</title>
	<meta name="description" content="Pod documentation for phputf8" />
	<meta name="inputfile" content="phputf8.pod" />
	<meta name="outputfile" content="&lt;standard output&gt;" />
	<meta name="created" content="Fri Jun 12 15:48:41 2009" />
	<meta name="generator" content="Pod::Xhtml 1.59" />
<meta http-equiv="Content-Type"
    content="text/html; charset=UTF-8" /><link rel="stylesheet" media="screen" type="text/css" href="screen.css" /><link rel="stylesheet" media="print" type="text/css" href="print.css" /></head>
<body>
<div id="header"><h1 class="title">phputf8</h1></div><div id="nav">[ <a href="http://phputf8.sourceforge.net/api/">API docs</a> ]</div><div class="pod">
<!-- INDEX START -->
<h3 id="TOP">Index</h3>

<ul><li><a href="#NAME">NAME</a></li>
<li><a href="#SYNOPSIS">SYNOPSIS</a></li>
<li><a href="#DESCRIPTION">DESCRIPTION</a></li>
<li><a href="#String_Functions">String Functions</a>
<ul><li><a href="#Further_string_functions">Further string functions</a></li>
</ul>
</li>
<li><a href="#UTF_8_Validation_and_Cleaning">UTF-8 Validation and Cleaning</a>
<ul><li><a href="#Validation">Validation</a></li>
<li><a href="#Cleaning_UTF_8">Cleaning UTF-8</a></li>
<li><a href="#Warning_on_ASCII_Control_Characters">Warning on ASCII Control Characters</a></li>
<li><a href="#Strategy">Strategy</a></li>
</ul>
</li>
<li><a href="#Performance_and_Optimization">Performance and Optimization</a>
<ul><li><a href="#When_data_is_99_ASCII">When data is 99% ASCII</a></li>
<li><a href="#Exploiting_UTF_8_s_design">Exploiting UTF-8's design</a></li>
</ul>
</li>
<li><a href="#Transliteration">Transliteration</a>
<ul><li><a href="#Stripping_multi_byte_characters">Stripping multi byte characters</a></li>
<li><a href="#Transliteration_Utilities">Transliteration Utilities</a></li>
</ul>
</li>
<li><a href="#SEE_ALSO">SEE ALSO</a>
</li>
</ul><hr />
<!-- INDEX END -->

<h1 id="NAME">NAME</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="NAME_CONTENT">
<p>phputf8 - Tools for working with UTF-8 in PHP</p>

</div>
<h1 id="SYNOPSIS">SYNOPSIS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="SYNOPSIS_CONTENT">
<pre>    require_once '/path/to/utf8/utf8.php';
    require_once UTF8 . '/utils/validation.php';
    require_once UTF8 . '/utils/ascii.php';

    # Check the UTF-8 is well formed
    if ( !utf8_is_valid($_POST['somecontent']) ) {

        require_once UTF8 . '/utils/bad.php';
        trigger_error('Bad UTF-8 detected. Clearning', E_USER_NOTICE);

        # Strip out bad sequences - replace with ? character
        $_POST['somecontent'] = utf8_bad_replace($_POST['somecontent']);

    }

    # This works fine with UTF-8
    $_POST['somecontent'] = ltrim($_POST['somecontent']);

    # If it contains only ascii chars, use native str fns for speed...
    if ( !utf8_is_ascii($_POST['somecontent']) ) {

        $endfirstword = strpos($_POST['somecontent'],' ');
        $firstword = substr($_POST['somecontent'],0,$endOfFirstWord);
        $firstword = strtoupper($firstword);
        $therest = substr($_POST['somecontent'],$endOfFirstWord);

    } else {

        # It contains multibyte sequences - use the slower but safe
        $endfirstword = utf8_strpos($_POST['somecontent'],' ');
        $firstword = utf8_substr($_POST['somecontent'],0,$endOfFirstWord);
        $firstword = utf8_strtoupper($firstword);
        $therest = utf8_substr($_POST['somecontent'],$endOfFirstWord);

    }

    # htmlspecialchars is also safe for use with UTF-8
    header(&quot;Content-Type: text/html; charset=utf-8&quot;);
    echo &quot;&lt;pre&gt;&quot;;
    echo &quot;&lt;strong&gt;&quot;.htmlspecialchars($firstword).&quot;&lt;/strong&gt;&quot;;
    echo htmlspecialchars($therest);
    echo &quot;&lt;/pre&gt;&quot;;




</pre>

</div>
<h1 id="DESCRIPTION">DESCRIPTION</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="DESCRIPTION_CONTENT">
<p>phputf8 does a few things for you;</p>
<dl>
	<dt>* Provides UTF-8 aware versions of PHP's string functions</dt>
	<dd>
		<p>All of these functions are prefixed with <code>utf8_</code>. Six of these functions
are loaded &quot;on the fly&quot;, depending on whether you have the mbstring
extension available. The rest build on top of those six. </p>
		<p>See <a href="#quot_String_Functions_quot">&quot;String Functions&quot;</a>.</p>
	</dd>
	<dt>* Detection of bad UTF-8 sequences</dt>
	<dd>
		<p>The file <code>UTF8 . '/utils/validation.php'</code> contains functions for testing
strings for bad UTF-8 sequences. Note that other functions in the library
assume valid UTF-8.</p>
		<p>See <a href="#quot_UTF_8_Validation_and_Cleaning_q">&quot;UTF-8 Validation and Cleaning&quot;</a></p>
	</dd>
	<dt>* Cleaning of bad UTF-8 sequences</dt>
	<dd>
		<p>Functions for stripping or replacing bad sequences are available in
<code>UTF8 . '/utils/bad.php'</code></p>
		<p>See <a href="#quot_UTF_8_Validation_and_Cleaning_q">&quot;UTF-8 Validation and Cleaning&quot;</a></p>
	</dd>
	<dt>* Detecting pure ASCII &amp; stripping non-ASCII</dt>
	<dd>
		<p>The file <code>UTF8 . '/utils/ascii.php'</code> contains utilities to detect
whether a UTF-8 string contains just ASCII characters (allowing
you to use PHP's faster, native, string functions) and also stripping
everything non-ASCII from a string</p>
		<p>See <a href="#quot_Performance_and_Optimization_qu">&quot;Performance and Optimization&quot;</a></p>
	</dd>
	<dt>* Basic transliteration</dt>
	<dd>
		<p>The file <code>UTF8 . '/utils/specials.php'</code> contains basic transliteration
functionality (<a href="http://en.wikipedia.org/wiki/Transliteration">http://en.wikipedia.org/wiki/Transliteration</a>) - not
much but enough to convert common European, non-ascii characters to
a reasonable ASCII equivalent. You might use these when preparing a
string for use as a filename, afterwhich you strip all other non-ascii
characters using the ASCII utilities.</p>
		<p>Further transliteration is provided in the <code>utf8_to_ascii</code> package
at <a href="http://sourceforge.net/projects/phputf8">http://sourceforge.net/projects/phputf8</a>. Much more powerful
functionality is provided by the pecl transliteration extension -
<a href="http://derickrethans.nl/translit.php">http://derickrethans.nl/translit.php</a> and 
<a href="http://pecl.php.net/package/translit">http://pecl.php.net/package/translit</a>.</p>
		<p>See <a href="#quot_Transliteration_quot">&quot;Transliteration&quot;</a></p>
	</dd>
</dl>

</div>
<h1 id="String_Functions">String Functions</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="String_Functions_CONTENT">
<p>There are seven essential functions provided by phputf8, which are
required by many of the other functions. These are all loaded
when you include the main <code>utf8.php</code> script e.g.</p>
<pre>    require_once '/path/to/utf8/utf8.php';

</pre>
<p>Six of these functions depend on whether the mbstring extension is
installed (see <a href="http://www.php.net/mbstring">http://www.php.net/mbstring</a>) - if it is available,
the following functions will be wrappers around the equivalent
mb_string functions;</p>
<dl>
	<dt>* <code>utf8_strlen</code></dt>
	<dt>* <code>utf8_strpos</code></dt>
	<dt>* <code>utf8_strrpos</code></dt>
	<dt>* <code>utf8_substr</code></dt>
	<dt>* <code>utf8_strtolower</code></dt>
	<dt>* <code>utf8_strtoupper</code></dt>
</dl>
<p><strong>Note:</strong> phputf8 cannot support mbstring function overloading;
it relies in some cases on PHP's native string functions
counting characters as bytes.</p>
<p>The seventh function is <code>utf8_substr_replace</code>, which is
implemented independent of mbstring (mbstring doesn't
provide it).</p>
<p><strong>Important Note</strong> - if you do not load <code>utf8.php</code> and you wish
to use the mbstring implementations, you need to set the mbstring
encoding to UTF-8 yourself - see <a href="http://www.php.net/mb_internal_encoding">http://www.php.net/mb_internal_encoding</a>.</p>

</div>
<h2 id="Further_string_functions">Further string functions</h2>
<div id="Further_string_functions_CONTENT">
<p>All other string functions must be included on demand. They are
available directly under the <code>UTF8</code> directory with filenames
corresponding to the equivalent PHP string functions, but still
with the function prefix <code>utf8_</code>.</p>
<p>For example, to load the strrev implementation;</p>
<pre>    # Load the main script
    require_once '/path/to/utf8/utf8.php';

    # Load the UTF-8 aware strrev implementation
    require_once UTF8 . '/strrev.php';
    print utf8_strrev('Iñtërnâtiônàlizætiøn').&quot;\n&quot;;

</pre>
<p>All string implementations are found in the <code>UTF8</code> directory.
For documentation for each function, see the phpdocs
<a href="http://phputf8.sourceforge.net/api">http://phputf8.sourceforge.net/api</a>.</p>
<p><strong>TODO</strong> Some of the functions, such as <code>utf8_strcspn</code> take
arguments like 'start' and 'length', requiring values in terms
of <i>characters</i> not bytes - i.e. return values from functions
like <code>utf8_strlen</code> and <code>utf8_strpos</code>. Additional implementations
would be useful which take byte indexes instead of character
positions - this would allow further advantage to be taken of
UTF-8's design and more use of PHP's native functions for performance.</p>

</div>
<h1 id="UTF_8_Validation_and_Cleaning">UTF-8 Validation and Cleaning</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="UTF_8_Validation_and_Cleaning_CONTEN">
<p>It's important to understand that multi-byte UTF-8 characters can be
badly formed. UTF-8 has rules regarding multi-byte characters and those
rules can be broken. Some possible reasons why a sequence of bytes
might be badly formed UTF-8;</p>
<dl>
	<dt>It's a different character encoding</dt>
	<dd>
		<p>For example, 8 bit characters in ISO-8859-1 would be badly formed UTF-8.
That said, characters declared as ISO-8859-1 but still within the ASCII-7
range would still be valid UTF-8.</p>
	</dd>
	<dt>It's a corrupted UTF-8 string</dt>
	<dd>
		<p>Something has mangled the UTF-8 string (PHP's native strrev function,
for example, would do this).</p>
	</dd>
	<dt>Someone is injecting badly formed UTF-8 input deliberately.</dt>
	<dd>
		<p>They might be attempting to &quot;break&quot; you RSS feed, for example.</p>
	</dd>
</dl>
<p>With that in mind, the functions provided in <code>./utils/validation.php</code>
and <code>./utils/bad.php</code> are intend to help guard against such problems.</p>

</div>
<h2 id="Validation">Validation</h2>
<div id="Validation_CONTENT">
<p>There are two functions in <code>./utils/validation.php</code>, one &quot;strict&quot;
and the other slightly more relaxed.</p>
<p>The strict version is <code>utf8_is_valid</code> - as well is checking each
sequence, byte-by-byte, it also regards sequences which are not
part of the Unicode standard as being invalid (UTF-8 allows for
5 and 6 byte sequences but have no meaning in Unicode, and will
result in browsers displaying &quot;junk&quot; characters (e.g. ? character).</p>
<p>The second function <code>utf8_compliant</code> relies of behaviour of
PHP's PCRE extension, to spot invalid UTF-8 sequences. This
function will pass 5 and 6 byte sequences but also performs
much better than <code>utf8_is_valid</code>.</p>
<p>Both are simple to use;</p>
<pre>    require_once UTF8 . '/utils/validation.php';
    if ( utf8_is_valid($str) ) {
        print &quot;Its valid\n&quot;;
    }
    if ( utf8_is_compliant($str) ) {
        print &quot;Its compliant\n&quot;;
    }




</pre>

</div>
<h2 id="Cleaning_UTF_8">Cleaning UTF-8</h2>
<div id="Cleaning_UTF_8_CONTENT">
<p>If you detect a UTF-8 encoded string contains badly formed
sequences, functions in <code>./utils/bad.php</code> can help. Be warned
that performance on large strings will be an issue.</p>
<p>It provides the following functitons;</p>
<dl>
	<dt>* <code>utf8_bad_find</code></dt>
	<dd>
		<p>Locates the <i>first</i> bad byte in a UTF-8 string, returning it's
<i>byte</i> (not chacacter) position in the string. You might use this
for iterative cleaning or analysis of a UTF-8 string for example;</p>
<pre>    require_once UTF8 . '/utils/validation.php';
    require_once UTF8 . '/utils/bad.php';

    $clean = '';
    while ( FALSE !== ( $badIndex = utf8_bad_find($str) ) ) {
        print &quot;Bad byte found at $badIndex\n&quot;;
        $clean .= substr($str,0,$badIndex);
        $str = substr($str,$badIndex+1);
    }
    $clean .= $str;

</pre>
	</dd>
	<dt>* <code>utf8_bad_findall</code></dt>
	<dd>
		<p>The same as <code>utf8_bad_find</code> but searches the complete string and
returns the index of all bad bytes found in an array</p>
	</dd>
	<dt>* <code>utf8_bad_strip</code></dt>
	<dd>
		<p>Removes all bad bytes from a UTF-8 string, returning the cleaned string</p>
	</dd>
	<dt>* <code>utf8_bad_replace</code></dt>
	<dd>
		<p>Removes all bad bytes from a UTF-8 string and replaces them with some
other character (default is ?)</p>
	</dd>
	<dt>* <code>utf8_bad_identify</code> and <code>utf8_bad_explain</code></dt>
	<dd>
		<p>Together these two functions attempt to provide a reason why a
particular byte is not valid UTF-8. Perhaps you might use these
when logging errors.</p>
	</dd>
</dl>

</div>
<h2 id="Warning_on_ASCII_Control_Characters">Warning on ASCII Control Characters</h2>
<div id="Warning_on_ASCII_Control_Characters_">
<p>The above functions for validating and cleaning UTF-8 strings
all regard ASCII control characters as being valid and
acceptable. But ASCII control chars are not acceptable in XML
documents - use the <code>utf8_strip_ascii_ctrl</code> function in
<code>./utils/ascii.php</code> (available v0.3+), which will remove
all ASCII control characters that are illegal in XML.</p>
<p>See <a href="http://hsivonen.iki.fi/producing-xml/#controlchar">http://hsivonen.iki.fi/producing-xml/#controlchar</a>.</p>

</div>
<h2 id="Strategy">Strategy</h2>
<div id="Strategy_CONTENT">
<p>Because validation and cleaning UTF-8 strings comes with a pretty high
cost, in terms of performance, you should be aiming to do this once
only, at the point where you receive some input (e.g. a submitted form)
before going on to using the rest of the string functions in this library.</p>
<p>You should also be aware that validation and cleaning is your job -
the utf8_* string functions <i>assume</i> they are being given well formed
UTF-8 to process, because the performance overhead of checking, every
time you called <code>utf8_strlen</code>, for example, would be very high.</p>

</div>
<h1 id="Performance_and_Optimization">Performance and Optimization</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="Performance_and_Optimization_CONTENT">
<p>The first thing you <i>shouldn't</i> be attempting to do is replace all use of PHP's
native string functions with functions from this library. Doing so will have
a dramatic (and bad) effect on your codes performance. It also misses opportunities
you may have to continue using PHP's native string functions.</p>
<p>There are two main areas to consider, when working out how to support UTF-8
with this library and achieve optimal performance.</p>

</div>
<h2 id="When_data_is_99_ASCII">When data is 99% ASCII</h2>
<div id="When_data_is_99_ASCII_CONTENT">
<p>First, if the majority of the data your application will be processing is 
written in English, most of the time you will be able to use PHP's native
string functions, only using the utf8_* string functions when you encounter
multibyte characters. This has already been implied above in the example
in the <a href="#quot_SYNOPSIS_quot">&quot;SYNOPSIS&quot;</a>. Most characters used in English fall within the
ASCII-7 range and ASCII characters in UTF-8 are no different to normal
ASCII characters.</p>
<p>So check whether a string is 100% ASCII first, and if so, use PHP's native
string functions on it.</p>
<pre>    require_once '/path/to/utf8/utf8.php';
    require_once UTF8 . '/utils/ascii.php';

    if ( utf8_is_ascii($string) ) {
        # use native PHP string functions
    } else {
        # use utf8_* string functions
    }

</pre>

</div>
<h2 id="Exploiting_UTF_8_s_design">Exploiting UTF-8's design</h2>
<div id="Exploiting_UTF_8_s_design_CONTENT">
<p>Second, you may be able to exploit UTF-8's design to your advantage,
depending on what <i>exactly</i> you are doing to a string. This road
requires more effort and a good understanding of UTF-8's design.</p>
<p>As a starting point, you really need to examine the range table
shown on Wikipedias page on UTF-8 <a href="http://en.wikipedia.org/wiki/UTF-8">http://en.wikipedia.org/wiki/UTF-8</a>.</p>
<p>Some key points about UTF-8's design;</p>
<dl>
	<dt>UTF-8 is a superset of ASCII</dt>
	<dd>
		<p>In other words ASCII-7 characters are encoded in exactly the same
way as normal. These characters are those shown of the <i>first</i>
table <a href="http://www.lookuptables.com/">http://www.lookuptables.com/</a> - the first 128 characters.</p>
		<p>Note that the second table shown at <a href="http://www.lookuptables.com/">http://www.lookuptables.com/</a>
&quot;Extended ASCII characters&quot; are not ASCII-7 characters are <i>are</i>
encoded differently in UTF-8 (probably using 2 bytes). Those
characters seem to be ISO-8859-1 - occasionally you will seen
people saying UTF-8 is backwards compatible with ISO-8859-1 - this
is <i>wrong</i>.</p>
		<p>One specific example which illustrates this;</p>
<pre>    $new_utf8_str = strstr('Iñtërnâtiônàlizætiøn','l');

</pre>
		<p>Using the &quot;needle&quot; character 'l' (in the ASCII-7 range), this
example works without any problems, the variable <code>$new_utf8_str</code>
being assigned the value 'lizætiøn', even though the haystack
string contains multibyte characters.</p>
		<p>Actually this example leads into the next point...</p>
	</dd>
	<dt>Every character sequence is unique in UTF-8</dt>
	<dd>
		<p>Assuming that a UTF-8 encoded string is well formed, any sequence
in that string representing a single character (be it a single
byte ASCII character or a multi byte character) cannot be mistaken
is as a subsequence of a larger multi byte sequence.</p>
		<p>That means all of the following examples work;</p>
<pre>    # Pop off a piece of a string using multi-byte character
    $new_utf8_str = strstr('Iñtërnâtiônàlizætiøn','ô');

    # Explode string using multibyte character
    $array = explode('ô','Iñtërnâtiônàlizætiøn');

    # Using byte index instead of chacter index...
    $haystack = 'Iñtërnâtiônàlizætiøn';
    $needle = 'ô';
    $pos = strpos($haystack, $needle);
    print &quot;Position in bytes is $pos&lt;br&gt;&quot;;
    $substr = substr($haystack, 0, $pos);
    print &quot;Substr: $substr&lt;br&gt;&quot;;




</pre>
	</dd>
</dl>
<p>Put those together and often you will be able to use existing code
with little or no modification.</p>
<p>Often you will be able to continue working in bytes instead of
logical characters (as the last example above shows).</p>
<p>There are some functions which you <i>will</i> always need to replace,
for example <code>strtoupper</code>. You should be able to get some idea of
which these functions are by looking at
<a href="http://www.phpwact.org/php/i18n/utf-8">http://www.phpwact.org/php/i18n/utf-8</a>.</p>





</div>
<h1 id="Transliteration">Transliteration</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="Transliteration_CONTENT">
<p>Sometimes you will need to be able to remove all multi-byte
characters from a UTF-8 string and use only ASCII. Some
possible reasons why;</p>
<dl>
	<dt>Interfaces to systems with no support for UTF-8</dt>
	<dd>
		<p>An application might be accessing data from your application
but lack support for UTF-8. You may need to remove all non-
ASCII-7 characters for it.</p>
	</dd>
	<dt>Filenames</dt>
	<dd>
		<p>Although most modern operating systems support Unicode, not
all applications running under that OS may do so and you may
be exposing yourself to security issues by allowing multi
byte characters in filenames.</p>
	</dd>
	<dt>Urls</dt>
	<dd>
		<p>Similar issues to filenames - most modern browsers support
the use of UTF-8 in URLs but doing so may not be a smart
idea e.g. potential for phishing via the use of similar
looking (to humans) characters.</p>
	</dd>
	<dt>Primary Keys / Identifiers</dt>
	<dd>
		<p>It is probably unwise to allow multi-byte UTF-8 characters into
certain critical &quot;fields&quot; in your application, such as a username.
Someone might be able to register a user with a similar looking
name to an admin user - consider &quot;admin&quot; vs. &quot;admın&quot; &lt; hard to
spot the difference (note the ı character in the second example).</p>
	</dd>
</dl>

</div>
<h2 id="Stripping_multi_byte_characters">Stripping multi byte characters</h2>
<div id="Stripping_multi_byte_characters_CONT">
<p>To simply remove all multibyte characters, the <code>./utils/ascii.php</code>
collection of functions can help e.g.;</p>
<pre>    require_once '/path/to/utf8/utf8.php';
    require_once UTF8 . '/utils/ascii.php';
    $str = &quot;admın&quot;;
    print utf8_strip_non_ascii($str); // prints &quot;admn&quot;

</pre>
<p>Not also the <code>utf8_strip_non_ascii_ctrl</code> function which also -
strips out ASCII control codes - see 
<a href="#quot_Warning_on_ASCII_Control_Charac">&quot;Warning on ASCII Control Characters&quot;</a> for information on that
topic.</p>

</div>
<h2 id="Transliteration_Utilities">Transliteration Utilities</h2>
<div id="Transliteration_Utilities_CONTENT">
<p>Now simply throwing out characters is not kind to users. An
alternative is transliteration, where you try to replace multi
byte characters with equivalent ASCII characters that a human
would understand. For example &quot;Zürich&quot; could be converted to
&quot;Zuerich&quot;, the multi byte &quot;ü&quot; character being replaced by &quot;ue&quot;.</p>
<p>See <a href="http://en.wikipedia.org/wiki/Transliteration">http://en.wikipedia.org/wiki/Transliteration</a> for a
general introduction to transliteration.</p>
<p>The main phputf8 package contains a single function in
the <code>./utils/ascii.php</code> script that does some (basic)
replacements of accented characters common in languages
like French. After using this function, you should still
strip out all remaining multi-byte characters. For
example;</p>
<pre>    require_once '/path/to/utf8/utf8.php';
    require_once UTF8 . '/utils/ascii.php';

    $filename = utf8_accents_to_ascii($filename);
    $filename = utf8_strip_non_ascii($filename);

</pre>
<p>This will at least preserve <i>some</i> characters in an
ASCII form that will be understandable by users.</p>
<p>Further an much more powerful transliteration 
capabilities are provided in the seperate utf8_to_ascii
package distributed at <a href="http://sourceforge.net/projects/phputf8">http://sourceforge.net/projects/phputf8</a>.
Because it is a port of Perls' <cite>Text::Unidecode</cite> package
to PHP, it is distruted under the same license.</p>
<p>A quick intro to utf8_to_ascii and be found at
<a href="http://www.sitepoint.com/blogs/2006/03/03/us-ascii-transliterations-of-unicode-text/">http://www.sitepoint.com/blogs/2006/03/03/us-ascii-transliterations-of-unicode-text/</a></p>
<p>Be warned that utf8_to_ascii does have limitations and a better
choice, if you have rights to install it in your environemt, is
Derick Rethans transliteration extension:
<a href="http://pecl.php.net/package/translit">http://pecl.php.net/package/translit</a>.</p>





</div>
<h1 id="SEE_ALSO">SEE ALSO</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="SEE_ALSO_CONTENT">
<p><a href="http://www.phpwact.org/php/i18n/charsets">http://www.phpwact.org/php/i18n/charsets</a>,
<a href="http://www.phpwact.org/php/i18n/utf-8">http://www.phpwact.org/php/i18n/utf-8</a>
<a href="http://wiki.silverorange.com/UTF-8_Notes">http://wiki.silverorange.com/UTF-8_Notes</a>
<a href="http://svn.wikimedia.org/viewvc/mediawiki/trunk/phase3/includes/normal/">http://svn.wikimedia.org/viewvc/mediawiki/trunk/phase3/includes/normal/</a> - Unicode normalization in PHP
<a href="http://www.webtuesday.ch/_media/meetings/utf-8_survival.pdf">http://www.webtuesday.ch/_media/meetings/utf-8_survival.pdf</a>
</p>

</div>
</div></body>
</html>
