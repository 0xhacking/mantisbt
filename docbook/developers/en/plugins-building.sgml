	<sect1 id="dev.plugins.building">
		<title>Building a Plugin</title>

		<para>
			This section will act as a walkthrough of how to build a plugin, from the
			bare basics all the way up to advanced topics.  A general understanding of
			the concepts covered in the last section is assumed, as well as knowledge
			of how the event system works.  Later topics in this section will require
			knowledge of database schemas and how they are used with MantisBT.
		</para>

		<para>
			This walkthrough will be working towards building a single end result: the
			"Example" plugin as listed in the <link linkend="dev.plugins.building.source">
			next section</link>.  You may refer to the final source code along the way,
			although every part of it will be built up in steps throughout this section.
		</para>

		<sect2 id="dev.plugins.building.basics">
			<title>The Basics</title>

			<para>
				This section will introduce the general concepts of plugin structure,
				and how to get a barebones plugin working with MantisBT.  Not much will be
				mentioned yet on the topic of adding functionality to plugins, just how to
				get the development process rolling.
			</para>

			<sect3 id="dev.plugins.building.basics.structure">
				<title>Plugin Structure</title>

				<para>
					The backbone of every plugin is what MantisBT calls the "basename", a
					succinct, and most importantly, unique name that identifies the plugin.
					It may not contain any spacing or special characters beyond the ASCII
					upper- and lowercase alphabet, numerals, and underscore.  This is used
					to identify the plugin everywhere except for what the end-user sees.
					For our "Example" plugin, the basename we will use should be obvious
					enough: "Example".
				</para>

				<para>
					Every plugin must be contained in a single directory named to match the
					plugin's basename, as well as contain at least a single PHP file, also
					named to match the basename, as such:
				</para>

				<programlisting>
Example/
	Example.php
				</programlisting>

				<para>
					This top-level PHP file must then contain a concrete class deriving from
					the <classname>MantisPlugin</classname> class, which must be named in the
					form of <classname>%Basename%Plugin</classname>, which for our purpose
					becomes <classname>ExamplePlugin</classname>.
				</para>

				<para>
					Because of how <classname>MantisPlugin</classname> declares the
					<function>register()</function>	method as <literal>abstract</literal>, our
					plugin must implement that method before PHP will find it semantically
					valid.  This method is meant for one simple purpose, and should never be
					used for any other task: setting the plugin's information properties,
					including the plugin's name, description, version, and more.
				</para>

				<para>
					Once your plugin defines its class, implements the <function>register()</function>
					method, and sets at least the name and version properties, it is then
					considered a "complete" plugin, and can be loaded and installed within
					MantisBT's plugin manager.  At this stage, our Example plugin, with all the
					possible plugin properties set at registration, looks like this:
				</para>

				<programlisting><filename>Example/Example.php</filename>

&lt;?php
class ExamplePlugin extends MantisPlugin {
    function register() {
        $this->name = 'Example';    # Proper name of plugin
        $this->description = '';    # Short description of the plugin
        $this->page = '';           # Default plugin page

        $this->version = '1.0';     # Plugin version string
        $this->requires = array(    # Plugin dependencies, array of basename => version pairs
            'MantisCore' => '1.2',  #   Should always depend on an appropriate version of MantisBT
            );

        $this->author = '';         # Author/team name
        $this->contact = '';        # Author/team e-mail address
        $this->url = '';            # Support webpage
    }
}
				</programlisting>

				<para>
					This alone will allow the Example plugin to be installed with MantisBT, and
					is the foundation of any plugin.  More of the plugin development process
					will be continued in the next sections.
				</para>
			</sect3>
		</sect2>

		<sect2 id="dev.plugins.building.pages">
			<title>Pages and Files</title>

			<para>
				The plugin API provides a standard hierarchy and process for adding new pages and
				files to your plugin.  For strict definitions, pages are PHP files that will be
				executed within the MantisBT core system, while files are defined as a separate
				set of raw data that will be passed to the client's browser exactly as it appears
				in the filesystem.
			</para>

			<para>
				New pages for your plugin should be placed in your plugin's
				<filename>pages/</filename> directory, and should be named using only letters and
				numbers, and must have a ".php" file extension.  To generate a URI to the new page
				in MantisBT, the API function <function>plugin_page()</function> should be used.
				Our Example plugin will create a page named <filename>foo.php</filename>, which
				can then be accessed via <literal>plugin_page.php?page=Example/foo</literal>, the
				same URI that <function>plugin_page()</function> would have generated:
			</para>

			<programlisting><filename>Example/pages/foo.php</filename>

&lt;?php
echo '&lt;p&gt;Here is a link to &lt;a href="', plugin_page( 'foo' ), '">page foo&lt;/a&gt;.&lt;/p&gt;';
			</programlisting>

			<para>
				Adding non-PHP files, such as images or CSS stylesheets, follows a very similar
				pattern as pages.  Files should be placed in the plugin's
				<filename>files/</filename> directory, and can only contain a single period in
				the name.  The file's URI is generated with the <function>plugin_file()</function>
				function.  For our Example plugin, we'll create a basic CSS stylesheet, and modify
				the previously shown page to include the stylesheet:
			</para>

			<programlisting><filename>Example/files/foo.css</filename>

p.foo {
    color: red;
}
			</programlisting>

			<programlisting><filename>Example/pages/foo.php</filename>

&lt;?php
echo '&lt;link rel="stylesheet" type="text/css" href="', plugin_file( 'foo.css' ), '"/&gt;',
     '&lt;p class="foo"&gt;This is red text.&lt;/p&gt;';
			</programlisting>

			<para>
				Note that while <function>plugin_page()</function> expects on the page's name,
				without the extension, <function>plugin_file()</function> requires the entire
				filename so that it can distinguish between <filename>foo.css</filename> and
				a potential file <filename>foo.png</filename>.
			</para>
		</sect2>

		<sect2 id="dev.plugins.building.events">
			<title>Using Events and Pages</title>

			<para>
			</para>
		</sect2>

		<sect2 id="dev.plugins.building.config">
			<title>Configuration and Languages</title>

			<para>
			</para>
		</sect2>

	</sect1>
